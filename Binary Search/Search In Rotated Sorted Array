/*

You have been given a sorted array/list 'arr' consisting of ‘n’ elements. You are also given an integer ‘k’.



Now the array is rotated at some pivot point unknown to you.



For example, if 'arr' = [ 1, 3, 5, 7, 8], then after rotating 'arr' at index 3, the array will be 'arr' = [7, 8, 1, 3, 5].



Now, your task is to find the index at which ‘k’ is present in 'arr'.



Note :
1. If ‘k’ is not present in 'arr', then print -1.
2. There are no duplicate elements present in 'arr'. 
3. 'arr' can be rotated only in the right direction.

*/


Approach 1 - Find the Minimum and Search twice

int BS(vector<int>& arr, int start, int end, int n, int k){
    while(start<=end){
        int mid = start + (end - start)/2;
        if(arr[mid] == k){
            return mid;
        }
        else if(arr[mid] > k){
            end = mid -1 ;
        } 
        else if (arr[mid] < k) {
            start = mid + 1;
        }
    }
    return - 1;
}
int search(vector<int>& arr, int n, int k)
{
    int start = 0 , end = n-1 , ans = -1;
    int low = 0, high = arr.size() - 1;
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] < arr[high]) {
            // The right side is sorted, the minimum element is on the left side
            high = mid;
        } else {
            // The left side is sorted, the minimum element is on the right side
            low = mid + 1;
        }
    }
    int ans1 = BS(arr,0,low-1,n,k);
    int ans2 = BS(arr,low,n-1,n,k);\
    if(ans1 == -1 && ans2 == -1){
        return -1;
    }
    else if(ans1 == -1){
        return ans2;
    }
    else if(ans2 == -1){
        return ans1;
    }
}


Approach 2 - Directly search for it

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[mid] <= nums[high]) {
                if (target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            } else {
                if (target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
        }
        return -1;
    }
};
