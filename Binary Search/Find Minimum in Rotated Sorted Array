/*
You are given an array 'arr' of size 'n' having unique elements that has been sorted in ascending order and rotated between 1 and 'n' times which is unknown.



The rotation involves shifting every element to the right, with the last element moving to the first position. For example, if 'arr' = [1, 2, 3, 4] was rotated one time, it would become [4, 1, 2, 3].



Your task is to find the minimum number in this array.



Note :
All the elements in the array are distinct. 


Example :
Input: arr = [3,4,5,1,2]

Output: 1

Explanation: The original array was [1,2,3,4,5] and it was rotated 3 times.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
4
3 4 1 2   


Sample Output 1 :
1


Explanation of Sample Input 1 :
The original array was [1, 2, 3, 4] and it was rotated 2 times.
*/

int findMin(vector<int>& arr)
{
	int n = arr.size();
	int start = 0 , end = n-1 , ans = -1;
    int low = 0, high = arr.size() - 1;
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] < arr[high]) {
            // The right side is sorted, the minimum element is on the left side
            high = mid;
        } else {
            // The left side is sorted, the minimum element is on the right side
            low = mid + 1;
        }
    }
	return arr[low];
}
