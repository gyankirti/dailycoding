/******************************************************************************
Q2. First negative number in every window of size = k
    we are provied with an array containing both positive and negative numbers 
    and a window size of k
    Find the first negative number in every window of size k
*******************************************************************************/
#include <iostream>
#include<bits/stdc++.h>

using namespace std;

/* brute force solution */
vector<int> brute(vector<int> arr, int k){
    vector<int> ans ;
    
    for(int i=0;i<arr.size()-k+1;i++){
        vector<int> q;
        for(int j=i;j<i+k;j++){
            if(arr[j]<i){
                q.push_back(arr[j]);
            }
        }
        if(q.size() ==0){
            ans.push_back(0);
        }
        else{
            ans.push_back(q[0]);
        }
    }
    return ans;
    
}

/*optimal solution*/

vector<int> optimal(vector<int> arr, int k){
    int i = 0, j = 0;
    
    list<int> l;
    vector<int> ans;
    
    
    while(j<arr.size()){
        if(arr[j]<0){
            l.push_back(arr[j]);
        }
        if(j-i+1<k){
            j++;
        }
        else if(j-i+1==k){
            if(l.size() == 0){
                ans.push_back(0);
            }
            else{
                ans.push_back(l.front());
                if(arr[i]==l.front()){
                    l.pop_front();
                }
            }
            i++;
            j++;
        }
        
    }
    
    return ans;
}

int main()
{
    vector<int> arr = {12,-1,-7,8,-15,30,16,28};
    int k = 3;
    
    
    vector<int> optimal_ans = optimal(arr,k);
    
    for(int k = 0; k < optimal_ans.size(); k++){
        cout<<optimal_ans[k]<< " ";
    }
    cout<<endl;
    
    vector<int> brute_ans = brute(arr,3);
    for(int k = 0; k < brute_ans.size(); k++){
        cout<<brute_ans[k]<< " ";
    }
}
