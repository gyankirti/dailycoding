/*
Problem statement
Given an array 'arr' of 'n' non-negative integers, your task is to move all the zeros to the end of the array while keeping the non-zero elements at the start of the array in their original order. Return the modified array.
Example :
Input: ‘n’ = 5, ‘arr’ = [1, 2, 0, 0, 2, 3]
Output: [1, 2, 2, 3, 0, 0]
*/



vector<int> optimal(int n , vector<int>){
 int j = -1;
    //place the pointer j:
    for (int i = 0; i < n; i++) {
        if (a[i] == 0) {
            j = i;
            break;
        }
    }

    //no non-zero elements:
    if (j == -1) return a;

    for (int i = j + 1; i < n; i++) {
        if (a[i] != 0) {
            swap(a[i], a[j]);
            j++;
        }
    }
    return a;
}

//gives TLE
vector<int> brute1(int n , vector<int> a){
  int zidx = 0;
    for(int i = 0;i<n;i++){
         if(a[i]==0){
            zidx = i;
            for(int j=i;j<n;j++){
                if(a[j]!=0){
                    int temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                    break;
                }
            }
        }
    }
    return a;
}

vector<int> brute2(int n,  vector<int> a){

}

vector<int> moveZeros(int n, vector<int> a) {
  vector<int> ans1 = optimal (n,a);
}
