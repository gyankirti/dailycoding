class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        queue<pair<pair<int, int>, int>> q;

        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(grid[i][j] == 2){
                    q.push({{i,j},0});
                }
            }
        }

        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};

        int tm = 0;
        // BFS 
        while(!q.empty()){
            int a = q.front().first.first;
            int b = q.front().first.second;
            int t = q.front().second;
            q.pop();
            tm = max(tm,t);
            for(int i = 0 ; i < 4 ; i++){
                    int nrow = a+drow[i];
                    int ncol = b+dcol[i];

                    if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && grid[nrow][ncol] == 1){
                        q.push({{nrow,ncol},t+1});
                        grid[nrow][ncol]=2;
                    }
            }
        }

        for(int i = 0 ; i < n ; i ++){
            for(int j = 0 ; j < m ; j++){
                if(grid[i][j] == 1){
                    return -1;
                }
            }
        }
        return tm;

    }
};
