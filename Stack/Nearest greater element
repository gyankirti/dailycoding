/*
Given an array arr[ ] of size N having elements, the task is to find the next greater element for each element of the array in order of their appearance in the array.
Next greater element of an element in the array is the nearest element on the right which is greater than the current element.
If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

Example 1:

Input: 
N = 4, arr[] = [1 3 2 4]
Output:
3 4 4 -1
Explanation:
In the array, the next larger element 
to 1 is 3 , 3 is 4 , 2 is 4 and for 4 ? 
since it doesn't exist, it is -1.
*/


#include <vector>
#include <stack>
#include <algorithm>

class Solution {
public:
    std::vector<long long> nextLargerElement(std::vector<long long> arr, int n) { 
        std::vector<long long> ans;
        std::stack<long long> st;
        
        // Traverse the array from the end to the beginning
        for(int i = n - 1; i >= 0; i--) {
            // If stack is empty, no greater element to the right
            if(st.empty()) {
                ans.push_back(-1);
            } 
            // If top of stack is greater than current element
            else if(st.top() > arr[i]) {
                ans.push_back(st.top());
            } 
            // While elements in stack are less than or equal to the current element
            else {
                while(!st.empty() && st.top() <= arr[i]) {
                    st.pop();
                }
                // If stack becomes empty, no greater element to the right
                if(st.empty()) {
                    ans.push_back(-1);
                } 
                // Otherwise, the top of the stack is the next greater element
                else {
                    ans.push_back(st.top());
                }
            }
            // Push the current element onto the stack
            st.push(arr[i]);
        }
        
        // Reverse the answer vector to get the correct order
        std::reverse(ans.begin(), ans.end());
        
        return ans;
    }
};
