/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// Recursive Solution - using reversed PreOrder Traversal
    void rsvPOT(TreeNode* node, int level, vector<int> &temp){
        if(node == nullptr){
            return ;
        }
        if(temp.size() == level){
            temp.push_back(node->val);
        }
        rsvPOT(node->right,level+1,temp);
        rsvPOT(node->left,level+1,temp);
    }

Iterative Solution - Iterative Solution
    vector<int> rsvLOT(TreeNode* root){

        queue<TreeNode*> q;
        vector<int> ans;

        if(root == nullptr){
            return ans;
        }
        

        q.push(root);
        while(!q.empty()){
            TreeNode* rightMostNode = nullptr;
            int n = q.size();
            for(int i = 0 ; i < n ; i++){
                TreeNode* temp = q.front();

                rightMostNode = temp;

                q.pop();
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }
            }
            ans.push_back(rightMostNode->val);

        }

        return ans;


    }


    vector<int> rightSideView(TreeNode* root) {
        vector<int> temp;
        //rsvPOT(root,0,temp);
        temp = rsvLOT(root);
        return temp;
    }
};
