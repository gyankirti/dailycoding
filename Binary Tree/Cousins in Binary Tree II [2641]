/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if(!root)
            return root;
        
        queue<TreeNode*> q;
        q.push(root);
        int levelSum = root->val;

        while(!q.empty())
        {
            int n = q.size();
            int nextLevelSum = 0;

            while(n--)
            {
                TreeNode* currNode = q.front();
                q.pop();
                currNode->val = levelSum - currNode->val;

                int siblingSum = currNode->left ? currNode->left->val : 0;
                siblingSum += currNode->right ? currNode->right->val : 0;

                if(currNode->left)
                {
                    nextLevelSum += currNode->left->val;
                    currNode->left->val = siblingSum;
                    q.push(currNode->left);
                }

                if(currNode->right)
                {
                    nextLevelSum += currNode->right->val;
                    currNode->right->val = siblingSum;
                    q.push(currNode->right);
                }
            } 
            levelSum = nextLevelSum;
        }

        return root;
    }
};
